name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check || true

      - name: Lint check
        run: npm run lint || true

      - name: Run tests
        run: npm test

      - name: Build project
        run: npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: './.lighthouse/config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          NEXT_PUBLIC_GOOGLE_ANALYTICS: ${{ secrets.NEXT_PUBLIC_GOOGLE_ANALYTICS }}
          NEXT_PUBLIC_ANALYTICS_ID: ${{ secrets.NEXT_PUBLIC_ANALYTICS_ID }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  monitoring:
    needs: deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Check deployment status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://disasterrecoveryqld.au)
          if [ "$response" != "200" ]; then
            echo "Deployment check failed with status code: $response"
            exit 1
          fi

      - name: Monitor performance
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://disasterrecoveryqld.au
            https://disasterrecoveryqld.au/services/water-damage
            https://disasterrecoveryqld.au/services/fire-damage
          budgetPath: './.lighthouse/budget.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Notify on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: '#FF0000'
          SLACK_TITLE: 'Deployment Monitoring Failed'
          SLACK_MESSAGE: 'Performance or availability issues detected in production'

  security:
    needs: deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'https://disasterrecoveryqld.au'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Notify on security issues
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: '#FF0000'
          SLACK_TITLE: 'Security Scan Failed'
          SLACK_MESSAGE: 'Security vulnerabilities detected in production'
